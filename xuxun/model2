#coding=utf-8

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import csv

rnn_unit=64
rnn_layers=2       
input_size=4
output_size=1
lr=0.0001         
f=open('train_data.csv')
df=pd.read_csv(f)    
f1=open('test_data.csv')
df1=pd.read_csv(f1)
data1=df1.iloc[:,3:10].values
data=df.iloc[:,3:10].values
date=df.iloc[:,1].values
midp=df1.iloc[:,3].values

def get_train_data(batch_size=2400,time_step=20,train_begin=0,train_end=430000):
    batch_index1=[]
    batch_index=[]
    data_train=data[:]
    data_train=np.delete(data_train,2,axis=1)
    data_train=np.delete(data_train,2,axis=1)
    data_train=np.delete(data_train,3,axis=1)
    normalized_train_data=(data_train-np.mean(data_train,axis=0))/np.std(data_train,axis=0)  
    train_x,train_y=[],[]  
    for i in range(len(normalized_train_data)-time_step):
       x=normalized_train_data[i:i+time_step,0:]
       y=normalized_train_data[i:i+time_step,0,np.newaxis]
       train_x.append(x.tolist())
       train_y.append(y)
       if (date[i+time_step]!=date[i]):
          for j in range(time_step):
              if (date[i+j]!=date[i+j+1]):
                  batch_index1.append(i+j)
                  break
       else:
           if i % batch_size==0:
               batch_index1.append(i)
    for item in batch_index1:
        if item not in batch_index:
            batch_index.append(item)

    return batch_index,train_x,train_y


def get_test_data(time_step=11,test_begin=0):
    data_test=data1[:]    
    data_test=np.delete(data_test,2,axis=1)
    data_test=np.delete(data_test,2,axis=1)
    data_test=np.delete(data_test,3,axis=1)
    mean=np.mean(data_test,axis=0)
    std=np.std(data_test,axis=0)
    normalized_test_data=(data_test-mean)/std  
    size=1000
    test_x,test_y=[],[]
    for i in range(size):
       x=normalized_test_data[i*time_step:(i+1)*time_step,0:]
       y=normalized_test_data[i*time_step:(i+1)*time_step,0]
       test_x.append(x.tolist())
       test_y.append(y)
    return mean,std,test_x,test_y


weights={
         'in':tf.Variable(tf.random_normal([input_size,rnn_unit])),
         'out':tf.Variable(tf.random_normal([rnn_unit,1]))
        }
biases={
        'in':tf.Variable(tf.constant(0.1,shape=[rnn_unit,])),
        'out':tf.Variable(tf.constant(0.1,shape=[1,]))
       }  

def rnnCell():
    basicrnn = tf.nn.rnn_cell.BasicRNNCell(rnn_unit)
    return basicrnn

def lstm(X):
    
    batch_size=tf.shape(X)[0]
    time_step=tf.shape(X)[1]
    w_in=weights['in']
    b_in=biases['in']
    input=tf.reshape(X,[-1,input_size])  
    input_rnn=tf.matmul(input,w_in)+b_in
    input_rnn=tf.reshape(input_rnn,[-1,time_step,rnn_unit])  
    cell = tf.nn.rnn_cell.MultiRNNCell([rnnCell() for i in range(rnn_layers)])
    init_state=cell.zero_state(batch_size,dtype=tf.float32)
    output_rnn,final_states=tf.nn.dynamic_rnn(cell, input_rnn,initial_state=init_state, dtype=tf.float32)
    output=tf.reshape(output_rnn,[-1,rnn_unit]) 
    w_out=weights['out']
    b_out=biases['out']
    pred=tf.matmul(output,w_out)+b_out
    return pred,final_states



def train_lstm(batch_size=2400,time_step=10,train_begin=0,train_end=430000):
    X=tf.placeholder(tf.float32, shape=[None,time_step,input_size])
    Y=tf.placeholder(tf.float32, shape=[None,time_step,output_size])
    batch_index,train_x,train_y=get_train_data(batch_size,time_step,train_begin,train_end)
    with tf.variable_scope("sec_lstm"):
        pred,_=lstm(X)
    loss=tf.reduce_mean(tf.square(tf.reshape(pred,[-1])-tf.reshape(Y, [-1])))
    train_op=tf.train.AdamOptimizer(lr).minimize(loss)
    saver=tf.train.Saver(tf.global_variables(),max_to_keep=1)

    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
        f4=open('sample1.csv','w')            
        writer=csv.writer(f4)
        writer.writerow(["epoch","loss"])
        for i in range(30):     
            for step in range(len(batch_index)-1):
                _,loss_=sess.run([train_op,loss],feed_dict={X:train_x[batch_index[step]:batch_index[step+1]],Y:train_y[batch_index[step]:batch_index[step+1]]})
            print("Number of iterations:",i," loss:",loss_)
           

            writer.writerow([i,loss_])           
        f4.close()

        print("model_save: ",saver.save(sess,'model_save/modle.ckpt'))
        print("The train has finished")
train_lstm()


def prediction(time_step=10):
    X=tf.placeholder(tf.float32, shape=[None,time_step,input_size])
    mean,std,test_x,test_y=get_test_data(time_step)
    with tf.variable_scope("sec_lstm",reuse=tf.AUTO_REUSE):
        pred,_=lstm(X)
    saver=tf.train.Saver(tf.global_variables())
    with tf.Session() as sess:

        module_file = tf.train.latest_checkpoint('model_save')
        saver.restore(sess, module_file)
        test_predict=[]
        for step in range(len(test_x)):
          prob=sess.run(pred,feed_dict={X:[test_x[step]]})
          predict=prob.reshape((-1))
          test_predict.append(predict)
        test_y=np.array(test_y)*std[0]+mean[0]
        test_predict=np.array(test_predict)*std[0]+mean[0]
        f3=open('sample.csv','w')
        writer=csv.writer(f3)
        writer.writerow(["caseid","midprice"])
        for i in range(len(test_predict)):
            if (i>141):
                writer.writerow([i+1,test_predict[i][0]])
        f3.close()

        

prediction()
